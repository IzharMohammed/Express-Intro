/*
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const app = express();
app.use(bodyParser.json());

// Function to read todos from the file
function readTodos() {
  // Check if the file exists
  if (fs.existsSync('./config.json')) {
    // Read the file content
    const data = fs.readFileSync('./config.json', 'utf-8');
    // Parse the JSON data and return
    return JSON.parse(data);
  }
  // Return an empty array if the file does not exist
  return [];
}


// Function to write todos to the file
function writeTodos(todo) {
  // Convert the todos array to a JSON string
  let data = JSON.stringify(todo);
  // Write the JSON string to the file
  fs.writeFileSync('./config.json', data, function (err) {
    // Throw an error if writing fails
    if (err) throw err;
    console.log('Added todo successfully !!!');
  });
}


// Route to get all todos
app.get('/todos', (req, res) => {
  // Read todos from the file
  const todos = readTodos();
  // Respond with the todos in JSON format
  res.json({
    todos
  });
});


// Route to get a specific todo by ID
app.get('/todos/:id', (req, res) => {
  // Log the ID parameter
  console.log(req.params.id);
  // Get the ID from the request parameters
  const id = req.params.id;
  // Iterate over the todos
  todos.map(todo => {
    // Check if the current todo's ID matches the requested ID
    if (todo.id == id) [
      // Respond with the matching todo in JSON format
      res.json({
        todo
      })
    ]
  });
});


// Route to create a new todo
app.post('/todos', (req, res) => {
  // Get the new todo data from the request body
  const todo = req.body;
  // Read existing todos from the file
  const todosData = readTodos();
  // Add the new todo to the todos array
  todosData.push(todo);
  // Write the updated todos array to the file
  writeTodos(todosData);
  // Respond with a success message
  res.json({
    msg: 'Added todo successfully'
  });
});


// Route to update an existing todo by ID
app.put('/todos/:id', (req, res) => {
  // Get the ID from the request parameters
  let id = req.params.id;
  // Get the updated title and description from the request body
  let { title, description } = req.body;
  // Read existing todos from the file
  const todos = readTodos();
  // Find the index of the todo to be updated
  const todoIndex = todos.find(todo => todo.id === id);
  // Log the index of the todo to be updated
  console.log('index', todoIndex.id);
  // Iterate over the todos
  todos.map(todo => {
    // Check if the current todo's ID matches the requested ID
    if (todo.id === id) {
      // Update the title and description of the todo
      todo.title = title,
      todo.description = description
    }
  });
  // Write the updated todos array to the file
  writeTodos(todos);
  // Respond with a success message
  res.json({
    msg: "updated todo successfully"
  });
});


// Route to delete a todo by ID
app.delete('/todos/:id', (req, res) => {
  // Get the ID from the request parameters
  let id = req.params.id;
  // Read existing todos from the file
  const todos = readTodos();
  // Filter out the todo with the matching ID
  let todosData = todos.filter(todo => todo.id != id);
  // Write the updated todos array to the file
  writeTodos(todosData);
  // Respond with a success message
  res.json({
    msg: 'Deleted todo successful'
  });
});


// Global error handler middleware
app.use((error, req, res, next) => {
  // Respond with a 500 status code and an error message
  res.status(500).send('Something went wrong !!!');
});


// Start the server on port 3000
app.listen(3000, () => {
  console.log('server is up');
});